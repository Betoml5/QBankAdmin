@model QBankAdmin.Areas.Operador.Models.IndexViewModel
@{

    Layout = "OperadorLayout";
}


<section class="container__operador">

    <div class="container__operador-atendiendo">
        <div class="container__operador--informacion">
            <p class="container__operador-caja"></p>
            <p class="container__operador-nombre">
                <i class="fa fa-user"></i>
                @User.Identity.Name
            </p>
        </div>

        <hr />


        <div class="container__operador-cajas">
            <div class="container__operador-cajas-container">
                @foreach (var item in Model.Cajas)
                {
                    <div class="container__operador-cajas-item">
                        <p data-caja-id="@item.Id" data-caja-numero="@item.NumeroCaja">Caja: @item.NumeroCaja</p>
                        <button>
                            Atender
                        </button>
                    </div>
                }
            </div>
        </div>

        <div class="container__operador-turnos-control">



            <div class="container__operador-turnos-actual">
                <h3>Atendiendo turno:</h3>
                <p></p>
            </div>

            <div class="container__operador-turnos-control-btns">
                <button id="btnEndTurno">
                    Finalizar turno
                </button>
                <button id="btnSkip">
                    Saltar turno
                </button>
                <button id="btnNext">
                    Siguiente turno
                </button>
            </div>

        </div>
    </div>

   

</section>

<script>
    const urlLocal = "https://localhost:5002/turno"; 
    const url = "https://qbank.websitos256.com/turno";
    const btnNext = document.getElementById("btnNext");
    const $turnoActual = document.querySelector(".container__operador-turnos-actual p");
    const $btnsAtender = document.querySelectorAll(".container__operador-cajas-item button");
    const $containerTurnosControl = document.querySelector(".container__operador-turnos-control");
    const $containerCajasControl = document.querySelector(".container__operador-cajas");
    const $caja = document.querySelector(".container__operador-caja");
    const $btnSkipTurno = document.querySelector("#btnSkip");
    const $btnEndTurno = document.getElementById("btnEndTurno");

    const cajaId = localStorage.getItem("cajaId")
    const cajaNumero = localStorage.getItem("cajaNumero");

    $btnEndTurno.addEventListener("click", endTurno);

    $btnsAtender.forEach((btn) => {
        btn.addEventListener("click", atender);
    });

    async function atender(e){
   
            const dataset = e.target.parentElement.querySelector("p").dataset;
            console.log(dataset)
            localStorage.setItem("cajaId", dataset.cajaId);
            localStorage.setItem("cajaNumero", dataset.cajaNumero);

            $caja.style.display = "block";
            $caja.textContent = `Caja: ${dataset.cajaNumero}`;
            $containerCajasControl.style.display = "none";
            $containerTurnosControl.style.display = "block";

            await connection.invoke("SetActiveCaja", +dataset.cajaId);

       
    }

    const connection = new signalR.HubConnectionBuilder()
        .withUrl(urlLocal, {
            skipNegotiation: true,
            transport: signalR.HttpTransportType.WebSockets,
        })
        .configureLogging(signalR.LogLevel.Information)
        .build();

    

    async function start() {
        try {
            await connection.start();
            console.log("SignalR Connected.");
        } catch (err) {
            console.log(err);
            setTimeout(start, 5000);
        }
    };

    connection.onclose(async () => {
        await start();
    });

    connection.on("AddToQueue", (turno) => {
        const turnosContainer = document.querySelector(".container__operador-turnos");
        const $div = document.createElement("div");
        $div.classList.add("container__operador-turnos-item");
        const pTurno = document.createElement("p");
        const pEstado = document.createElement("p");
        pTurno.textContent = `Turno: ${turno.codigoTurno}`;
        pEstado.textContent = `${turno.estado}`;
        $div.appendChild(pTurno);
        $div.appendChild(pEstado);
        turnosContainer.appendChild($div);
    });

    connection.on("SetCurrentTurn", (turno, cajaId) => {

        if(turno, cajaId){
            const turnos = document.querySelectorAll(".container__operador-turnos-item");
            $turnoActual.textContent = `Turno: ${turno}`;
            $turnoActual.dataset.turno = turno;
            turnos.forEach((item) => {
                if (item.textContent.includes(turno)) {
                    item.remove();
                }
            });
        }

       
    });

    connection.on("SkipTurn", (turno, siguienteTurno) => {
          

        if (turno, siguienteTurno) {
            $turnoActual.textContent = `Turno: ${siguienteTurno.codigoTurno}`;
            $turnoActual.dataset.turno = siguienteTurno.codigoTurno;
        }


    });

    btnNext.addEventListener("click", async () => {
        const cajaId = localStorage.getItem("cajaId");
        const cajaNumero = localStorage.getItem("cajaNumero");
        if (cajaId) {
            console.log(cajaId)
            btnNext.disabled = true;
            btnNext.style.cursor = "not-allowed";
            btnNext.style.opacity = 0.5;
            await connection.invoke("SetCurrentTurn", (+cajaId));
        }

        setTimeout(() => {
            btnNext.disabled = false;
            btnNext.style.opacity = 1;
            btnNext.style.cursor = "inherit"

        }, 1000)
    });


    $btnSkipTurno.addEventListener("click", async () => {
        console.log($turnoActual.dataset.turno)

        if($turnoActual.dataset.turno){
            await connection.invoke("SkipTurn", $turnoActual.dataset.turno);
        }
    });
    

    


    async function endTurno(){
            
            const cajaId = localStorage.getItem("cajaId");
            const cajaNumero = localStorage.getItem("cajaNumero");  
            $btnEndTurno.disabled = true;
            await connection.invoke("SetInactiveCaja", +cajaId)
            localStorage.removeItem("cajaId");
            localStorage.removeItem("cajaNumero");
            window.location.reload();
            $btnEndTurno.disabled = false;
    }

    function init() {
        if (cajaId != null && cajaNumero != null) {
            $containerTurnosControl.style.display = "block";
            $containerCajasControl.style.display = "none";
            $caja.style.display = "block";
            $caja.textContent = `Caja: ${cajaNumero}`;
        }

        const turnoActual = localStorage.getItem("turnoActual");

        if (turnoActual) {
            $turnoActual.textContent = `Turno: ${turnoActual}`;
            $turnoActual.dataset.turno = turnoActual;
        }


    }



    // Start the connection.
    init();
    start();
</script>